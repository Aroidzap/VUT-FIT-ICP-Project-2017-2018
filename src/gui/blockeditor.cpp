/**
 * @file blockeditor.cpp
 * @brief UI Class for main window
 * @details Class contains code generated by Qt Designer (actual code is generated during compilation)
 *          and some handwritten code for other actions
 * @author Tomáš Pazdiora
 * @author Michal Pospíšil
 */
#include <QtWidgets>

#include "blockeditor.h"
#include "ui_blockeditor.h"

BLOCKEDITOR::BLOCKEDITOR(QWidget *parent) :
    QMainWindow(parent),
	ui(new Ui::BLOCKEDITOR)
{
	ui->setupUi(this);

    createActions();
    createMenus();
    createToolBars();
    setCurrentFile("");
    setUnifiedTitleAndToolBarOnMac(true);

}

BLOCKEDITOR::~BLOCKEDITOR()
{
    delete ui;
}

void BLOCKEDITOR::createMenus()
{
    fileMenu = menuBar()->addMenu("&File");
    fileMenu->addAction(openAct);
    fileMenu->addSeparator();
    fileMenu->addAction(saveAct);
    fileMenu->addAction(saveAsAct);
    fileMenu->addSeparator();
    fileMenu->addAction(exitAct);

    helpMenu = menuBar()->addMenu("&Help");
    helpMenu->addAction(aboutAct);
    helpMenu->addSeparator();
    helpMenu->addAction(helpAct);
}

void BLOCKEDITOR::createActions()
{
    openAct = new QAction(QIcon(":/icons/open.png"), "&Open...", this);
    openAct->setShortcuts(QKeySequence::Open);
    openAct->setStatusTip("Open an existing file");
    connect(openAct, SIGNAL(triggered()), this, SLOT(open()));

    saveAct = new QAction(QIcon(":/icons/save.png"), "&Save", this);
    saveAct->setShortcuts(QKeySequence::Save);
    saveAct->setStatusTip("Save the document to disk");
    connect(saveAct, SIGNAL(triggered()), this, SLOT(save()));

    saveAsAct = new QAction("Save &As...", this);
    saveAsAct->setShortcuts(QKeySequence::SaveAs);
    saveAsAct->setStatusTip("Save the document under a new name");
    connect(saveAsAct, SIGNAL(triggered()), this, SLOT(saveAs()));

    computeAct = new QAction(QIcon(":/icons/compute.png"), "&Compute", this);
    computeAct->setShortcut(QKeySequence::fromString("F3", QKeySequence::NativeText));
    computeAct->setStatusTip("Computes the whole schema");
    //connect(computeAct, SIGNAL(triggered()), this, SLOT(compute()));

    stepAct = new QAction(QIcon(":/icons/step.png"), "&Step", this);
    stepAct->setShortcut(QKeySequence::fromString("F4", QKeySequence::NativeText));
    stepAct->setStatusTip("Steps through the computation");
    //connect(copyAct, SIGNAL(triggered()), this, SLOT(step()));

    resetAct = new QAction(QIcon(":/icons/reset.png"), "&Reset", this);
    resetAct->setShortcut(QKeySequence::fromString("F5", QKeySequence::NativeText));
    resetAct->setStatusTip("Resets the computation to the first block");
    //connect(resetAct, SIGNAL(triggered()), this, SLOT(reset()));

    aboutAct = new QAction(QIcon(":/icons/about.png"), "&About", this);
    aboutAct->setStatusTip("Show the application's about box");
    connect(aboutAct, SIGNAL(triggered()), this, SLOT(about()));


    helpAct = new QAction(QIcon(":/icons/help.png"), "&Help", this);
    helpAct->setStatusTip("Show the application's help");
    helpAct->setShortcuts(QKeySequence::HelpContents);
    connect(helpAct, SIGNAL(triggered()), this, SLOT(help()));

    exitAct = new QAction(QIcon(":/icons/exit.png"), "E&xit", this);
    exitAct->setStatusTip("Close the application");
    exitAct->setShortcuts(QKeySequence::Quit);
    connect(exitAct, SIGNAL(triggered()), this, SLOT(close()));
}


void BLOCKEDITOR::closeEvent(QCloseEvent *event)
{
    if (maybeSave()) {
        event->accept();
    } else {
        event->ignore();
    }
}

void BLOCKEDITOR::open()
{
    if (maybeSave()) {
        QString fileName = QFileDialog::getOpenFileName(this);
        if (!fileName.isEmpty())
            loadFile(fileName);
    }
}

bool BLOCKEDITOR::save()
{
    if (curFile.isEmpty()) {
        return saveAs();
    } else {
        return saveFile(curFile);
    }
}

bool BLOCKEDITOR::saveAs()
{
    QFileDialog dialog(this);
    dialog.setWindowModality(Qt::WindowModal);
    dialog.setAcceptMode(QFileDialog::AcceptSave);
    QStringList files;
    if (dialog.exec())
        files = dialog.selectedFiles();
    else
        return false;

    return saveFile(files.at(0));
}

void BLOCKEDITOR::about()
{
    QMessageBox::about(this, "About Block Editor",
                             "<h1>Block Editor</h1>"
                             "<h2>ICP Project 2017/2018</h2>"
                             "<p><b>Authors:</b> Tomáš Pazdiora, Michal Pospíšil</p>");
}

void BLOCKEDITOR::help()
{
    QMessageBox::about(this, "Help",
                             "<h1>Block Editor Help</h1>"
                             "<p><b>Creating blocks: </b>Right-click and select the desired type.</p>"
                             "<p><b>Deleting blocks/connections: </b>Click on a trash icon and then on a block/connection.</p>");
}

void BLOCKEDITOR::documentWasModified()
{
    //setWindowModified(textEdit->document()->isModified());
}

void BLOCKEDITOR::createToolBars()
{
    fileToolBar = addToolBar("File");
    fileToolBar->addAction(openAct);
    fileToolBar->addAction(saveAct);

    actionToolBar = addToolBar("Actions");
    actionToolBar->addAction(computeAct);
    actionToolBar->addAction(stepAct);
    actionToolBar->addAction(resetAct);

    helpToolBar = addToolBar("Help");
    helpToolBar->addAction(helpAct);
}

bool BLOCKEDITOR::maybeSave()
{
    QMessageBox::StandardButton ret;
    ret = QMessageBox::warning(this, "BLOCKEDITOR",
                                     "Do you want to save your changes?",
                 QMessageBox::Save | QMessageBox::Discard | QMessageBox::Cancel);
    if (ret == QMessageBox::Save) {
        return save();
    }
    else {
        if (ret == QMessageBox::Cancel) {
        return false;
        }
    }
    return true;
}


void BLOCKEDITOR::loadFile(const QString &fileName)
{
    QFile file(fileName);
    if (!file.open(QFile::ReadOnly | QFile::Text)) {
        QMessageBox::warning(this, "Application",
                                   QString::fromStdString("Cannot read file %1:\n%2.")
                             .arg(fileName)
                             .arg(file.errorString()));
        return;
    }

    QTextStream in(&file);
#ifndef QT_NO_CURSOR
    QApplication::setOverrideCursor(Qt::WaitCursor);
#endif
    // FILE LOADING
#ifndef QT_NO_CURSOR
    QApplication::restoreOverrideCursor();
#endif

    setCurrentFile(fileName);
    statusBar()->showMessage("File loaded", 2000);
}


bool BLOCKEDITOR::saveFile(const QString &fileName)
{
    QFile file(fileName);
    if (!file.open(QFile::WriteOnly | QFile::Text)) {
        QMessageBox::warning(this, "Application",
                             QString::fromStdString("Cannot write file %1:\n%2.")
                             .arg(fileName)
                             .arg(file.errorString()));
        return false;
    }

    QTextStream out(&file);
#ifndef QT_NO_CURSOR
    QApplication::setOverrideCursor(Qt::WaitCursor);
#endif
    // FILE SAVING
#ifndef QT_NO_CURSOR
    QApplication::restoreOverrideCursor();
#endif

    setCurrentFile(fileName);
    statusBar()->showMessage("File saved", 2000);
    return true;
}

void BLOCKEDITOR::setCurrentFile(const QString &fileName)
{
    curFile = fileName;

    setWindowModified(false);

    QString shownName = curFile;
    if (curFile.isEmpty())
        shownName = "untitled.xml";
    setWindowFilePath(shownName);
}

